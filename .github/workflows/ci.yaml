name: ci

on:
  pull_request:
    branches:
      - 'master'

jobs:
  # # Test if complete demo is in sync with individual manifests
  # complete-demo-sync-check:
  #   runs-on: ubuntu-latest
  #   env:
  #     COMPLETE_DEMO_ARGS: --rm -v ${{ github.workspace }}:/workdir
  #     COMPLETE_DEMO_DIR: 'deploy/kubernetes/'
  #     COMPLETE_DEMO_IMAGE: 'manifests-image'
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Build image
  #     env:
  #       DOCKER_BUILDKIT: 1
  #     run: docker build -t $COMPLETE_DEMO_IMAGE $COMPLETE_DEMO_DIR
  #   - name: check comeplte-demo.yaml content sync
  #     run: docker run $COMPLETE_DEMO_ARGS $COMPLETE_DEMO_IMAGE make -C $COMPLETE_DEMO_DIR check-complete-demo

  # # Test if we can successfully deploy complete-demo
  # # TODO: Change GitHub action to the helm/kind-action@v1.3.0
  # deployments-tests:
  #   needs: complete-demo-sync-check
  #   runs-on: ubuntu-latest
  #   env:
  #     kind-version: 'v0.10.0'
  #     kind-image: 'kindest/node:v1.20.0'
  #   timeout-minutes: 10
  #   steps:
  #   - uses: actions/checkout@v2
  #   - name: Start Kind
  #     uses: engineerd/setup-kind@v0.5.0
  #     with:
  #       version: ${{ env.kind-version }}
  #       image: ${{ env.kind-image }}
  #   - name: Wait cluster to start
  #     run: |
  #       until [ "$(kubectl get pods -A --no-headers | grep -cEv '([0-9]+)/\1')" -eq 0 ]; do
  #           sleep 5s
  #       done
  #       kubectl get pod -A
  #   - name: Run and test Complete demo
  #     run: |
  #       kubectl apply -f deploy/kubernetes/complete-demo.yaml
  #       until [ "$(kubectl get pods -n sock-shop --no-headers | grep -cEv '([0-9]+)/\1')" -eq 0 ]; do
  #           sleep 5s
  #           kubectl get pods -n sock-shop
  #           kubectl describe node | grep "Allocated resources" -A 10
  #       done
  #       # TODO: Add checks if all pods are successfully running
  #       kubectl get pod -A

  # # Build openapi and healtcheck images
  # build-test-images:
  #   runs-on: ubuntu-latest
  #   env:
  #     GROUP: weaveworksdemos
  #   strategy:
  #     matrix:
  #       repo: ["openapi", "healthcheck"]
  #   steps:
  #   - uses: actions/checkout@v2
  #   # Push to dockerhub
  #   - name: Set up Docker Buildx
  #     uses: docker/setup-buildx-action@v1
  #   - name: Login to DockerHub
  #     uses: docker/login-action@v1
  #     with:
  #       username: ${{ secrets.DOCKER_USER }}
  #       password: ${{ secrets.DOCKER_PASS }}
  #   - name: Build and push
  #     uses: docker/build-push-action@v2
  #     with:
  #       context: ${{ matrix.repo }}
  #       push: true
  #       tags: ${{ env.GROUP }}/${{ matrix.repo }}:${{ github.sha }}

  linter:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout
      - name: TODO lint
        run: grep -rnw 'TODO:' . --color=auto --exclude-dir=.git
      - name: YAML Lint
        uses: ibiqlik/action-yamllint@v3.1.1
      - name: Shellcheck
        uses: reviewdog/action-shellcheck@v1.12.0

  terraform:
    runs-on: ubuntu-latest
    steps:
      - uses: hashicorp/setup-terraform@v2
        with:
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
      - name: Change cwd to the terraform directory
        run: cd ./deploy/terraform
      - name: Terraform fmt
        id: fmt
        run: terraform fmt -check
        continue-on-error: true
      - name: Terraform Init
        id: init
        run: terraform init
      - name: Terraform Validate
        id: validate
        run: terraform validate -no-color
      - name: Terraform Plan
        id: plan
        run: terraform plan -no-color

  build:
    needs: linter
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
        name: Checkout
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt'
      - name: Gradle Wrapper Validation
        uses: gradle/wrapper-validation-action@v1
      - name: Build with Gradle
        run: ./gradlew build
